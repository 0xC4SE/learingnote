Makefile文件格式
obj=main. c function. c
main:$(obj)
        gcc -o main $(obj)
%.o:%.c
        gcc -c $<
clean:
        rm *.o
        rm main

Cmake可以在不同平台生成Makefile
CMakeLists. txt
单目录单文件
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(demo1)
ADD_EXECUTABLE(demo1 test.cpp)
使用cmake:$cmake ./$make

单目录多文件
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(demo2)
AUX_SOURCE_DIRECTOR(./  DIR_SRCS)
ADD_EXECUTABLE(demo2 ${DIR_SRCS})
#ADD_EXECUTABLE(demo2 test.cpp test2.cpp)当然也可以用第二种，只是第一种比较方便

多目录多文件
底层目录即子目录
AUX_SOURCE_DIRECTOR(./  DIR_LIB_SRCS)
ADD_LIBRARY(Mylib [SHARED|STATIC]${DIR_LIB_SRCS})
顶层目录
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(demo3)
ADD_SUBDIRECTORY(./mylib)#这是库目录
AUX_SOURCE_DIRECTOR(./  DIR_SRCS)
ADD_EXECUTABLE(demo3 ${DIR_SRCS})
TARGET_LINK_LIBRARIES(demo3 Mylib)这是子库

多目录多文件标准操作
$mkdir source
$mv demo. cpp source
$mkdir build
source文件夹的CMakeLists
INCLUDE_DIRECTORIES({PROJECT_SOURCE_DIR}/mylib)库的路径
AUX_SOURCE_DIRECTOR(./  DIR_SRCS)
ADD_EXECUTABLE(demo4 ${DIR_SRCS})
TARGET_LINK_LIBRARIES(demo4 Mylib)
库的路径CMakeLists和上面demo3是一样的
顶层文件的CMakeLists
CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(demo3)
ADD_SUBDIRECTORY(./mylib)
ADD_SUBDIRECTORY(./source)
要在build文件夹make
$cmake ..
$make