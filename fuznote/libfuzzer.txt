libfuzzer下载
    git clone https://github.com/Dor1s/libfuzzer-workshop --depth=1
依赖
    sudo apt-get install -y make autoconf automake libtool pkg-config zlib1g-dev
编译安装
    ./build.sh          #编译出来是一个库：libFuzzer.a

使用案例一
test.h
    #include <stdio.h>
    #include <stdlib.h> 
    int VulnerableFunction1(const uint8_t* data, size_t size) 
    { 
        int result = 0;  
        char tmp[5];  
        if (size >= 3) 
        {    
            tmp[size] = 'a';  
         }  
         return result;
    }    
fuzz.c
    #include <stdint.h>
    #include "test.h" 
    extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) 
    { 
        VulnerableFunction1(data, size); 
        return 0; 
    }
编译fuzz
    mkdir tmp;vim case
    clang++ -std=c++ -fsanitize=fuzzer -fsanitize=address fuzz.c ../libfuzzer-workshop/libFuzzer/Fuzzer/libFuzzer.a -g -o fuzz
    ./fuzz tmp/
#clang6以后包括了libFuzzer.a所以不用再链接
    clang -fsanitize=fuzzer -fsanitize=address fuzz.c -o fuzz
    ./fuzz tmp/

使用案例二（多参数）
test.h
    #include <stdio.h> 
    #include <stdlib.h> 
    #include <stdint.h>
    int VulnerableFunction1(FILE *fp, const uint8_t* data, size_t size) 
    {
        int result = 0;  
        char tmp[5];  
        if (size >= 3) 
        {    
            tmp[size] = 'a';  
        }  
        return result;
    }
fuzz.c
    #include <stdio.h>
    #inlcude "test.h"
    #include <stdint.h>
    extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) 
    { 
        FILE *fp;
        fp=fopen("test.txt","r");
        VulnerableFunction1(fp, data, size); 
        return 0; 
    }
编译fuzz程序
    mkdir tmp;vim case
    vim test.txt
    clang -fsanitize=fuzzer -fsanitize=address fuzz.c -o fuzz
    ./fuzz tmp/



使用案例三（动态链接的库）
test.c
    #include <stdio.h> 
    #include <stdlib.h> 
    #include <stdint.h>
    int VulnerableFunction1(const uint8_t* data, size_t size) 
    {
        printf("xxxxxxxxxxxxxxxxxx");
        int result = 0;  
        char tmp[5];  
        if (size >= 3) 
        {    
        tmp[size] = 'a';  
        } 
        return result;
    }
fuzz.c
    #include <stdint.h>
    int LLVMFuzzerTestOneInput(const uint8_t *data, int size) 
    { 
        VulnerableFunction1(data, size); 
        return 0; 
    }
编译test程序的动态链接库
    clang -fsanitize=address -fPIC -shared -o test.so test.c            #这里test程序使用ASAN
编译fuzz程序（需要把动态链接库包含进来）
    clang -fsanitize=fuzzer -o fuzz fuzz.c test.so -fsanitize=address   #这里fuzz程序使用libFuzzer
    #这里需要改变一下test.so的链接路径
    export LD_LIBRARY_PATH=~/path/to/program
    mkdir tmp;vim case
    ./fuzz tmp/

特殊情况，可能会误报
#需要自己核查，一般crash为空，可能是误报

