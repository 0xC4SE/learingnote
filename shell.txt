1.数据检索命令
*行检索: grep egrep
    -i 不区分大小写
    -n 显示行号
    -w 按单词搜索
    -r 逐层遍历文件目录
    -v 反选,不包含所选择字符串
    $grep 'root' /etc/passwd
*字符串检索：cut tr
cut:截取字符串
    -c 以字符为单位进行分割
    -d 自定义分隔符，默认为制表符
    -f 与-d一起使用，指定列数
    $cut -d ':' -f 3,5#第三列和第五列
    $cut -d ':' -f 3-5#第三列到第五列
tr:字符串转换：替换，删除
    tr 'tree' 'mode'#替换字符串tree为mode
    -d 删除字符串1中所有输入字符
    -s 删除所有重复出现的字符序列，
    $tr -s ' ' | cut -d ' ' -f 3
    $tr -d '1'
2.数据处理命令
sort:数据排序
    -u 去重重复行
    -r 降序排列
    -o 将排序结果输出到文件中
    -n 以数字排序，默认时按字符排序
    -t 指定分隔符
    -k 第N列
    -b 忽略前导空格
    -R 随机排序，每次运行的结果均不同
    sort -n -t ":" -k 3 1.txt
uniq:去除连续的重复行（必须先排序）
    -i 忽略大小写
    -c 统计重复行次数
    -d 只显示重复行
    sort -n 2.txt
    uniq 2.txt
    uniq -d 2.txt
    uniq -dc 2.txt
tee:双向输入（输入到屏幕并保存文件）
    -a 双向追加重定向(不加参数则覆盖)
    echo hello | tee filename
paste:工具用于合并文件输出到屏幕，不会改动源文件
    -d 自定义间隔符，默认是tab，只接受一个字符
    -s 将每个文件中的所有内容按照一行输出，文件中的行与行以TAB间隔
    paste a.txt b.txt
xargs:上一个命令的输出作为下一个命令的命令行参数
-a file  从文件中读入作为stdin
-E flag flag  必须是一个以空格分隔的标志，xargs遇到flag就停止
-p 每次执行一个argument的时候询问一次用户
-n 后面跟次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的
-t 先打印命令，然后再执行
-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了
-d delim分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符


3.shell字符
!       执行历史命令;!!执行上一条命令
$       变量中取内容符
+ - * / %   加减乘除取余
&       后台执行
;       可以在shell中一行执行多个命令，命令之间用;
\       转义字符
``      反引号 命令中执行命令   echo "hello `whoami`"
''      单引号 不解释变量
""      双引号 解释变量
通配符
~       家目录
*       星号是shell中所有的通配符
?       问号是shell中的通配符 匹配回车外的单个字符
[list]  匹配[list]中的任意单个字符;[]代表范围[1-5] 1到5
[!list] 匹配除list中的任意单个字符;{}代表范围{1..5}1到5
{string1,string2...}    匹配string1，string2或更多字符串
重定向
>       覆盖输入
>>      追加输入
<       输出
<<      追加输出

实战
ipconfig ens33 | grep -w "inet"|tr -s " "|cut -d " " -f3|xargs echo "IP: "       #tr先规范一下把tab替换成空格，cut搜索打印

grep -i "bash" /etc/passwd | grep -v "root"|cut -d ":" -f1,2,7|tr ":" "\t"



shell
$bash -x 1.sh
-x 输出过程
-n 检查shell脚本命令是否正确


#!/bin/bash
# #！魔法字节 指定执行环境
# #代表注释

shell中的变量
变量的定义
    变量名=赋值     #变量名和等号之间不能有空格
    #简易变量名为大写,和命令区分或者_name
取消变量
    $unset 变量名

指定有类型的变量declare
    -i 将变量看成整数
    -r 使变量只读readonly,该变量的值无法更改,并且不能为unset
    -x 标记变量通过环境导出
    -a 指定为索引数字(普通数组);查看普通数组
    -A 指定为关联变量;查看关联数组
$declare -i _num

变量的分类
变量分为四类：本地变量(当前终端中定义)，环境变量(本用户.bashrc,.bash_profile)，全局变量，内置变量
查看环境变量:$env
查看所有变量:$set 
将本地变量设置为环境变量export命令
shell脚本运行时(子shell)并不会拥有父shell的本地变量
全局变量:所有用户 周期 到关机
所有用户和shell都可以使用，在/etc/profile,/etc/bashrc中定义并export
内置变量:所有用户 周期 到关机
$? 上一条命令执行后的返回状态
    0 代表成功
    非0 不成功
$$ 当前所在进程的进程号
$! 后台运行的最后一个进程号
!$ 调用最后一条历史中的参数
!! 调用最后一条命令历史
$# 脚本后面接的参数的个数
$* 脚本后面所有参数，参数当成一个整体输出，每一个变量参数之间以空格隔开
$@ 脚本后面所有参数，参数是独立的，也是全部输出
$0 当前执行的进程/程序名
$1-$9 位置参数变量
${10}-${n} 扩展位置参数变量

取变量的值
$变量名
路径取值
    dirname $变量名  #取出文件路径中的目录
    basename $变量名 #取出文件路径中的文件名
URL取值
    ${#变量名}      #URL长度
    ${变量名称#*.} #*通配符 .URL分隔符
    %代表从右往左去掉一个/key/
    %%代表从右往左最大去掉/key/
    #代表从左往右去掉一个/key/
    ##代表从左往右最大去掉/key/


vim disk_partition.sh
#!/bin/sh
1.分区
fdisk /dev/sdb <<EOF        #EOF代表左括号
n
p
3

+543M
n       #创建扩展分区
e
4


n       #创建逻辑分区sdb5

+2G
n       #创建逻辑分区sdb6

+3G
w       #生效
EOF     #EOF代表右括号
2.创建逻辑卷
    2.1创建物理卷
    pvcreate /dev/sdb5 /dev/sdb6
    2.2创建卷组
    vgcreate -s 16m vg100 /dev/sdb{5..6}
    2.3创建逻辑卷
    lvcreate -L 2.5G -n lv100 vg100
3.格式化
    mkfs.ext4 /dev/sdb3
    mkfs.xfs /dev/vg100/lv100
4.修改/etc/fstab，实现自动挂载
    echo "/dev/sdb3  /data/data1 ext4 default  0 0">>/etc/fstab
    echo "/dev/vg100/lv100 /data/data2 xfs  default 0 0">>/etc/fstab
5.挂载分区
    mkdir -p /data/data{1..2}
    mount -a
6.验证并输出挂载结果
    mount | grep "/dev/sdb3"
    test $? -eq 0&&echo "/dev/sdb3 挂载成功"||echo "/dev/sdb3挂载失败"
#注意检索的时候，mount输出中LV的表示方式，或者直接检索挂载点/data/data2也可以
    mount|grep "vg100-lv100"
    test $? -eq 0&&echo "/dev/vg100/lv100挂载成功"||echo "/dev/vg100/lv100挂载失败"

$mount;df -Th         #验证有没有挂载


shell进阶
1.shell格式化输出
echo 
    -n 不要在最后自动换行
    -e 解释转义符号,若字符串出现一下字符，则需要特别处理，则不会把他们当成一般文字输出
        转义字符
        \a 发出警告声
        \b 删除前一个字符
        \t 插入tab
        \n 换行
        \c 最后不加上换行符号
        \f 换行但光标停留在原来的位置
        \r 光标移动至行首，但不换行
        \v 与\f一样
        \0nnn 打印nnn(8进制)所代表的ascii字符
        \xnn 打印nn(16进制)所代表的ascii
输出颜色字体
格式如下
echo -e "\033[字背景颜色;文件颜色m字符串\033[0m"
字体颜色：30-37
背景颜色：40-47
echo -e "\033[41;36m somthing here \033[0m"
最后面板控制选项说明
特效
\033[0m 关闭所有属性
\033[1m 设置高亮
\033[4m 下划线
\033[5m 闪烁

2.shell脚本交互
    read:默认接收键盘的输入，回车符代表输入结束
    -p 打印信息
    -t 限定时间
    -s 关闭回显
    -n 输入字符个数
    read 变量名(输入保存在变量中)
3.shell运算
赋值运算
a=10
a='baism'   #字符串必须用引号
算数运算
+ - *(注意转义，否则会被认为是通配符) /
expr 命令(整数运算)
let 命令(整数运算，变量运算)
$(())
bc 命令(能做整型和浮点型,scale=2代表小数点后2位)
echo "scale=2;100/3"|bc
逻辑运算
比较运算
文件类型,权限，新旧
4.数组




